// Code generated by MockGen. DO NOT EDIT.
// Source: storj.io/storj/pkg/pb (interfaces: CertificatesClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	pb "storj.io/storj/pkg/pb"
)

// MockCertificatesClient is a mock of CertificatesClient interface
type MockCertificatesClient struct {
	ctrl     *gomock.Controller
	recorder *MockCertificatesClientMockRecorder
}

// MockCertificatesClientMockRecorder is the mock recorder for MockCertificatesClient
type MockCertificatesClientMockRecorder struct {
	mock *MockCertificatesClient
}

// NewMockCertificatesClient creates a new mock instance
func NewMockCertificatesClient(ctrl *gomock.Controller) *MockCertificatesClient {
	mock := &MockCertificatesClient{ctrl: ctrl}
	mock.recorder = &MockCertificatesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCertificatesClient) EXPECT() *MockCertificatesClientMockRecorder {
	return m.recorder
}

// Sign mocks base method
func (m *MockCertificatesClient) Sign(arg0 context.Context, arg1 *pb.SigningRequest, arg2 ...grpc.CallOption) (*pb.SigningResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sign", varargs...)
	ret0, _ := ret[0].(*pb.SigningResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockCertificatesClientMockRecorder) Sign(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockCertificatesClient)(nil).Sign), varargs...)
}
